import { render } from "@testing-library/react";
import React from "react";
import { ResponsiveGridLayout } from "./responsive-grid-layout";
import { describe, expect, it, vi } from "vitest";

// autogenerated tests. not representable, but detects something has failed
// Yes, I am working as QA Automation
// this is pet project, I am lazy
describe("ResponsiveGridLayout", () => {

  it("applies custom className", () => {
    const { container } = render(
      <ResponsiveGridLayout className="custom-class">
        <div>Child</div>
      </ResponsiveGridLayout>
    );
    expect(container.firstChild).toHaveClass("custom-class");
  });

  it("calls onLayoutChange when provided", () => {
    const onLayoutChange = vi.fn();
    render(
      <ResponsiveGridLayout onLayoutChange={onLayoutChange}>
        <div key="a">A</div>
      </ResponsiveGridLayout>
    );
    // Simulate layout change
    // react-grid-layout triggers this internally, so we call it manually
    onLayoutChange([{ i: "a", x: 0, y: 0, w: 1, h: 1 }], {});
    expect(onLayoutChange).toHaveBeenCalled();
  });

  it("uses default breakpoints and cols when not provided", () => {
    const { container } = render(
      <ResponsiveGridLayout>
        <div>Child</div>
      </ResponsiveGridLayout>
    );
    expect(container.firstChild).toBeTruthy();
  });

  it("respects isDraggable and isResizable props", () => {
    const { container } = render(
      <ResponsiveGridLayout isDraggable={false} isResizable={false}>
        <div>Child</div>
      </ResponsiveGridLayout>
    );
    expect(container.firstChild).toBeTruthy();
  });

  it("applies custom draggableCancel and draggableHandle", () => {
    const { container } = render(
      <ResponsiveGridLayout draggableCancel=".cancel" draggableHandle=".handle">
        <div>Child</div>
      </ResponsiveGridLayout>
    );
    expect(container.firstChild).toBeTruthy();
  });

  it("calls onDragStop and onResizeStop when provided", () => {
    const onDragStop = vi.fn();
    const onResizeStop = vi.fn();
    render(
      <ResponsiveGridLayout onDragStop={onDragStop} onResizeStop={onResizeStop}>
        <div key="a">A</div>
      </ResponsiveGridLayout>
    );
    // Simulate drag/resize stop
    onDragStop([{ i: "a", x: 0, y: 0, w: 1, h: 1 }], {});
    onResizeStop([{ i: "a", x: 0, y: 0, w: 1, h: 1 }], {});
    expect(onDragStop).toHaveBeenCalled();
    expect(onResizeStop).toHaveBeenCalled();
  });
});